using System.Collections.Generic;
using Factorization.Factoring.BinaryTree;
using Factorization.NumberTypes;
using Factorization.NumberTypes.Interfaces;

namespace Factorization.Factoring
{
    //The following class was derived from the user fubo (https://stackoverflow.com/users/1315444/fubo) post on stackoverflow.com
    //Stackoverflow post: https://stackoverflow.com/questions/36311991/c-sharp-display-a-binary-search-tree-in-console
    //Refactoring the Add_Sub method was done to create a binary tree that will represent a factorization tree
    //Added a Count Property for testing purposes
    //All prime numbers will be placed on the right node, unless there is nowhere left to put it (E.G: Factorization Tree of 75)
    
    public class FactorizationTree
    {
        private BNode _root;
        private IComparer<long> _comparer = Comparer<long>.Default;

        public FactorizationTree()
        {
            _root = null;
            Count = 0;
        }

        public int Count { get; private set; }

        public bool Add(IFactor factor)
        {
            if (_root == null)
            {
                _root = new BNode(factor);
                Count++;
                return true;
            }
            else
            {
                return Add_Sub(_root, factor);
            }
        }

        private bool Add_Sub(BNode node, IFactor factor)
        {
            if (_comparer.Compare(node.value, factor.Value) > 0 && factor.GetType() == typeof(PrimeNumber))
            {
                if (node.right == null)
                {
                    node.right = new BNode(factor);
                    Count++;
                    return true;
                }

                Add_Sub(node.right, factor);
            }
 
            if (_comparer.Compare(node.value, factor.Value) > 0)
            {
                if (node.left == null)
                {
                    node.left = new BNode(factor);
                    Count++;
                    return true;
                }

                return Add_Sub(node.left, factor);
            }
            
            return false;
        }
        
        //The following property and method were generated by user Ivan Stoev (https://stackoverflow.com/users/5202563/ivan-stoev)
        //as a solution to this problem on stackoverflow.com: https://stackoverflow.com/questions/36311991/c-sharp-display-a-binary-search-tree-in-console
        public BNode Root => _root;

        public void Print()
        {
            Root.Print();
        }
    }
}

        
